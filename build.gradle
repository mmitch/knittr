apply plugin: 'java'
/* we are a Java project, obviously */
jar {
	manifest {
		attributes(
			'Main-Class': 'de.cgarbs.knittr.Knittr'
		)
	}
}


apply plugin: 'application'
/* provide a 'run' target to run the knittr UI */
mainClassName = 'de.cgarbs.knittr.Knittr'


apply plugin: 'jacoco'
/* generate Java code coverage reports */
jacocoTestReport {
	reports {
		xml.enabled true
	}
}


apply plugin: 'gradle-one-jar'
/* build a full jar containing all dependencies
   source: https://github.com/rholder/gradle-one-jar */
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.github.rholder:gradle-one-jar:1.0.4'
	}
}


repositories {
	mavenCentral()

	/* this is for cgarbs-javalib */
	maven {
		url "https://www.cgarbs.de/maven2/"
	}
}
dependencies {
	compile 'org.apache.xmlgraphics:batik-rasterizer:1.8', 'de.cgarbs:cgarbs-javalib:0.2.0'
	testCompile 'junit:junit:4.+', 'org.apache.xmlgraphics:fop:2.1' /* only for PDFTranscoder, try to get rid of this! */
}



 /***
 **** my own tasks
 ***/

task fullJar(type: OneJar) {
	description 'build a Jar including all dependencies'

	mainClass = mainClassName
	archiveName = project.name + '-full.jar'
}

task fixit(type: Exec) {
	description 'Fixes line breaks and indentation on empty lines.'

	commandLine 'tools/fixit.sh'
}

task publishDropbox(type: Copy, dependsOn: jar) {
	description 'Deploy current JAR to Dropbox.'

	from( jar.destinationDir ) {
		include jar.archiveName
		rename { project.name + '-light.jar' }
	}
	into '/home/mitch/Dropbox/schnucki/knittr'
}

task publishDropboxFull(type: Copy, dependsOn: fullJar) {
	description 'Deploy current JAR to Dropbox.'

	from( fullJar.destinationDir ) {
		include fullJar.archiveName
		rename { project.name + '.jar' }
	}
	into '/home/mitch/Dropbox/schnucki/knittr'
}

task checkl10n() {
	description 'Check all localizations for missing property file keys.'

	/* FIXME: all paths handcrafted, there should be a better way */
	finalizedBy(
		checkl10nSingle('src/main/resources/de/cgarbs/knittr/resource', 'MainWindow'),
		checkl10nSingle('src/main/resources/de/cgarbs/knittr/resource', 'Project'),
		checkl10nSingle('src/main/resources/de/cgarbs/knittr/resource', 'RenderException'),
		)
}

def checkl10nSingle(path, prefix) {
	description 'Check one localization for missing property file keys.'

	return tasks.create("checkl10n /${path}/${prefix}", Exec) {
		List args = [ 'tools/check-l10n.pl' ]
		fileTree(dir: path).include("${prefix}*.properties").each {
			File file -> args.add(file as String)
		}

		commandLine args
	}
}
